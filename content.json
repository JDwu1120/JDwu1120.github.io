[{"title":"","date":"2017-03-13T15:38:21.000Z","path":"2017/03/13/Laravel blade模版引擎学习/","text":"Laravel blade模版引擎学习 ##一 .什么是模版引擎？ 模板引擎（这里特指用于Web开发的模板引擎）是为了使用户界面与业务数据（内容）分离而产生的，它可以生成特定格式的文档，用于网站的模板引擎就会生成一个标准的HTML文档。 ##二 .模版引擎的三个作用 1.变量值的输出（echo） 2.条件判断和循环（if ... else、for、foreach、while） 3.引入或继承其他文件 ##三 .什么是blade引擎？ Blade是Laravel提供的一个非常简单、强大的模板引擎，不同于其他流行的PHP模板引擎，Blade在视图中并不约束你使用PHP原生代码。所有的Blade视图都会被编译成原生PHP代码并缓存起来直到被修改，这意味着对应用的性能而言Blade基本上是零开销。Blade视图文件使用.blade.php文件扩展并存放在resources/views目录下。 代码示意 Laravel html, body { height: 100%; } body { margin: 0; padding: 0; width: 100%; display: table; font-weight: 100; font-family: ‘Lato’; } .container { text-align: center; display: table-cell; vertical-align: middle; } .content { text-align: center; display: inline-block; } .title { font-size: 96px; } Laravel 5 &lt;?php echo “welcome”; ?&gt; 这里我们注意到，在上述代码中不仅有html代码还有一句echo \"welcome\"; ?>```这是因为blade引擎默认的文件都是php文件，与普通的html文件不同，我们不仅能在里面写html代码更能编写php代码。除此之外，blade引擎还自带了特殊的关键字：@section、@yield、@extends、@parent等命令。12345678910111213141516171819**@section用来标记一个blade模版中的一部分，用@yield让这部分在另一个模版中表示出来。**&lt;html&gt; &lt;head&gt; &lt;title&gt;App Name - @yield(&apos;title&apos;)&lt;/title&gt; &lt;/head&gt; &lt;body&gt; @section(&apos;sidebar&apos;) This is the master sidebar. @show &lt;div class=&quot;container&quot;&gt; @yield(&apos;content&apos;) &lt;/div&gt; &lt;/body&gt;&lt;/html&gt;**&gt;上述代码表示标记了一个名叫:sidebar的部分用来在之后的地方使用，并且用到了以前标记的 title 和 content这两个部分。**&gt;定义子页面的时候，可以使用Blade的@extends指令来指定子页面所继承的布局，继承一个Blade布局的视图将会使用@section指令注入内容到布局的片段中，记住，如上面例子所示，这些片段的内容将会显示在布局中使用@yield的地方： @extends(‘layouts.master’) @section(‘title’, ‘Page Title’) @section(‘sidebar’) @parent &lt;p&gt;This is appended to the master sidebar.&lt;/p&gt; @endsection @section(‘content’) This is my body content.@endsection``` 使用@parent可以在已经标记好的@section中添加（不是覆盖）新的东西，如上述就在sidebar中加入了一行&lt;p&gt;This is appended to the master sidebar.&lt;/p&gt;代码，并且还会保存之前的东西。 还有其他的相关操作如数据显示、流程控制、服务注入等请参考laravel文档 ##四 模版渲染原理 Laravel 的 View 部分是内置了两套输出系统：直接输出和使用 Blade 引擎“编译”后输出，默认情况下它们通过文件名后缀来选择：.blade.PHP 后缀的认为是模板视图文件，其他的 .php 文件按照 PHP 本身的方式执行。虽然 Blade 模板文件中也可以随意嵌入 PHP 代码，但如果并没有使用，系统还去进行语法解析和替换也是没有必要的，这样可以提高效率。使用 View 组件输出时，不管是调用 helpers 中提供的 view 函数还是使用 Facades 提供静态接口View::make()，实际上执行的都是 Illuminate\\View\\Factory 中的 make 方法。以此为入口，很容易就能知道视图解析输出的流程：查找视图文件；根据文件名后缀从 Container 中取出响应的引擎；加载视图文件或编译后加载编译后的文件执行，同时将需要解析的数据暴露在视图文件环境中。更多详细内容请参考skykingf的博客","tags":[]},{"title":"Hello World","date":"2017-03-13T07:51:01.000Z","path":"2017/03/13/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]